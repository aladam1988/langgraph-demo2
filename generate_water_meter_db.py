import sqlite3
import os
import json
import uuid
from datetime import datetime

def main():
    """将水表数据导入到SQLite数据库中"""
    # 数据库路径
    db_path = "water_meter_data.db"
    
    # 如果数据库已存在，先删除
    if os.path.exists(db_path):
        os.remove(db_path)
    
    # 创建数据库连接
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # 创建表结构
    print("创建数据库表...")
    
    # 创建账户表
    cursor.execute('''
    CREATE TABLE accounts (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status TEXT DEFAULT 'active',
        metadata TEXT
    )
    ''')
    
    # 创建水表读数表
    cursor.execute('''
    CREATE TABLE meter_readings (
        id TEXT PRIMARY KEY,
        account_id TEXT NOT NULL,
        reading_time TEXT NOT NULL,
        current_reading REAL NOT NULL,
        current_usage REAL NOT NULL,
        average_usage REAL NOT NULL,
        daily_average REAL NOT NULL,
        daily_max REAL NOT NULL,
        daily_min REAL NOT NULL,
        timestamp TIMESTAMP,
        FOREIGN KEY (account_id) REFERENCES accounts(id)
    )
    ''')
    
    # 插入账户数据
    print("插入账户数据...")
    
    # 获取唯一的账户ID列表
    account_ids = set()
    for row in data:
        account_ids.add(row[0])
    
    # 插入每个账户
    for account_id in account_ids:
        cursor.execute('''
        INSERT INTO accounts (id, name, status)
        VALUES (?, ?, ?)
        ''', (
            str(account_id),
            f"水表测试账户{account_id}",
            "active"
        ))
    
    # 插入水表读数数据
    print("插入水表读数数据...")
    
    for row in data:
        account_id, reading_time, current_reading, current_usage, average_usage, daily_average, daily_max, daily_min = row
        
        # 将日期格式从 YYYY/MM/DD 转换为 YYYY-MM-DD
        reading_time = reading_time.replace('/', '-')
        
        # 将日期字符串转换为时间戳
        date_obj = datetime.strptime(reading_time, "%Y-%m-%d")
        timestamp = date_obj.timestamp()
        
        # 插入水表读数记录
        cursor.execute('''
        INSERT INTO meter_readings (
            id, account_id, reading_time, current_reading, current_usage, 
            average_usage, daily_average, daily_max, daily_min, timestamp
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            str(uuid.uuid4()),
            str(account_id),
            reading_time,
            float(current_reading),
            float(current_usage),
            float(average_usage),
            float(daily_average),
            float(daily_max),
            float(daily_min),
            timestamp
        ))
    
    # 提交更改并关闭连接
    conn.commit()
    conn.close()
    
    print(f"\n✅ 数据库文件 '{db_path}' 已成功创建！")
    print(f"数据库包含:")
    print(f"- {len(account_ids)}个账户记录")
    print(f"- {len(data)}个水表读数记录")
    print("\n你可以使用SQLite浏览器或其他工具打开此数据库文件。")

# 数据列表
data = [
    [1, "2025/1/1", 1, 0, 1.6, 0, 0, 0],
    [1, "2025/1/11", 1, 0, 1.6, 0, 0, 0],
    [1, "2025/1/21", 1, 0, 1.6, 0, 0, 0],
    [1, "2025/2/1", 1, 0, 1.6, 0, 0, 0],
    [1, "2025/2/11", 1, 0, 2, 0, 0, 0],
    [1, "2025/2/21", 1, 0, 2.4, 0, 0, 0],
    [1, "2025/3/1", 1, 0, 3.4, 0, 0, 0],
    [1, "2025/3/11", 6, 5, 3.4, 5, 5, 5],
    [1, "2025/3/21", 12, 6, 3.4, 6, 6, 6],
    [1, "2025/4/1", 24, 12, 3.4, 12, 12, 12],
    [2, "2025/1/1", 390, 0, 4.2, 0, 0, 0],
    [2, "2025/1/11", 395, 5, 4.5, 5, 5, 5],
    [2, "2025/1/21", 400, 5, 4.5, 5, 5, 5],
    [2, "2025/2/1", 404, 4, 4.4, 4, 4, 4],
    [2, "2025/2/11", 408, 4, 4.6, 4, 4, 4],
    [2, "2025/2/21", 413, 5, 4.3, 5, 5, 5],
    [2, "2025/3/1", 417, 4, 4.8, 4, 4, 4],
    [2, "2025/3/11", 423, 6, 4.8, 6, 6, 6],
    [2, "2025/3/21", 423, 0, 4.8, 0, 0, 0],
    [2, "2025/4/1", 435, 12, 4.8, 12, 12, 12],
    [3, "2025/1/1", 435, 0, 4.4, 0, 0, 0],
    [3, "2025/1/11", 441, 6, 4.8, 6, 6, 6],
    [3, "2025/1/21", 445, 4, 4.7, 4, 4, 4],
    [3, "2025/2/1", 449, 4, 4.8, 4, 4, 4],
    [3, "2025/2/11", 454, 5, 4.9, 5, 5, 5],
    [3, "2025/2/21", 459, 5, 4.5, 5, 5, 5],
    [3, "2025/3/1", 464, 5, 5.2, 5, 5, 5],
    [3, "2025/3/11", 470, 6, 5.2, 6, 6, 6],
    [3, "2025/3/21", 470, 0, 5.2, 0, 0, 0],
    [3, "2025/4/1", 483, 13, 5.2, 13, 13, 13],
    [4, "2025/1/1", 637, 0, 5.6, 0, 0, 0],
    [4, "2025/1/11", 643, 6, 6, 6, 6, 6],
    [4, "2025/1/21", 643, 0, 6.1, 0, 0, 0],
    [4, "2025/2/1", 656, 13, 6.4, 13, 13, 13],
    [4, "2025/2/11", 661, 5, 6, 5, 5, 5],
    [4, "2025/2/21", 668, 7, 5.6, 7, 7, 7],
    [4, "2025/3/1", 672, 4, 6.4, 4, 4, 4],
    [4, "2025/3/11", 680, 8, 6.4, 8, 8, 8],
    [4, "2025/3/21", 680, 0, 6.4, 0, 0, 0],
    [4, "2025/4/1", 697, 17, 6.4, 17, 17, 17],
    [5, "2025/1/1", 204, 0, 3.1, 0, 0, 0],
    [5, "2025/1/11", 205, 1, 3.2, 1, 1, 1],
    [5, "2025/1/21", 207, 2, 3.2, 2, 2, 2],
    [5, "2025/2/1", 209, 2, 3.2, 2, 2, 2],
    [5, "2025/2/11", 210, 1, 3.7, 1, 1, 1],
    [5, "2025/2/21", 211, 1, 3.8, 1, 1, 1],
    [5, "2025/3/1", 213, 2, 5.4, 2, 2, 2],
    [5, "2025/3/11", 221, 8, 5.4, 8, 8, 8],
    [5, "2025/3/21", 223, 2, 5.4, 2, 2, 2],
    [5, "2025/4/1", 244, 21, 5.4, 21, 21, 21],
    [6, "2025/3/21", 17.33, 0.05, 0.1, 0.05, 0.05, 0.05],
    [6, "2025/3/22", 17.41, 0.08, 0.2, 0.08, 0.08, 0.08],
    [6, "2025/3/23", 17.58, 0.17, 0.2, 0.17, 0.17, 0.17],
    [6, "2025/3/24", 17.63, 0.05, 0.2, 0.05, 0.05, 0.05],
    [6, "2025/3/25", 17.82, 0.19, 0.2, 0.19, 0.19, 0.19],
    [6, "2025/3/26", 17.9, 0.08, 0.2, 0.08, 0.08, 0.08],
    [6, "2025/3/27", 18.07, 0.17, 0.3, 0.17, 0.17, 0.17],
    [6, "2025/3/28", 18.1, 0.03, 0.3, 0.03, 0.03, 0.03],
    [6, "2025/3/29", 19.23, 1.13, 0.3, 1.13, 1.13, 1.13],
    [6, "2025/3/30", 20.32, 1.09, 0.3, 1.09, 1.09, 1.09],
    [6, "2025/3/31", 20.4, 0.08, 0.3, 0.08, 0.08, 0.08],
    [6, "2025/4/1", 20.48, 0.08, 0.3, 0.08, 0.08, 0.08],
    [7, "2025/3/21", 290, 0, 0.1, 0, 0, 0],
    [7, "2025/3/22", 290, 0, 0.1, 0, 0, 0],
    [7, "2025/3/23", 290, 0, 0.1, 0, 0, 0],
    [7, "2025/3/24", 290, 0, 0.1, 0, 0, 0],
    [7, "2025/3/25", 290, 0, 0.1, 0, 0, 0],
    [7, "2025/3/26", 290, 0, 0.1, 0, 0, 0],
    [7, "2025/3/27", 290, 0, 0.3, 0, 0, 0],
    [7, "2025/3/28", 290, 0, 0.7, 0, 0, 0],
    [7, "2025/3/29", 290, 0, 0.7, 0, 0, 0],
    [7, "2025/3/30", 293, 3, 0.7, 3, 3, 3],
    [7, "2025/3/31", 298, 5, 0.7, 5, 5, 5],
    [7, "2025/4/1", 298, 0, 0.7, 0, 0, 0],
    [8, "2025/3/20", 333, 0, 0.3, 0, 0, 0],
    [8, "2025/3/21", 333, 0, 0.3, 0, 0, 0],
    [8, "2025/3/22", 333, 0, 0.3, 0, 0, 0],
    [8, "2025/3/23", 334, 1, 0.3, 1, 1, 1],
    [8, "2025/3/24", 334, 0, 0.2, 0, 0, 0],
    [8, "2025/3/25", 334, 0, 0.2, 0, 0, 0],
    [8, "2025/3/26", 334, 0, 0.2, 0, 0, 0],
    [8, "2025/3/27", 334, 0, 0.3, 0, 0, 0],
    [8, "2025/3/28", 334, 0, 0.7, 0, 0, 0],
    [8, "2025/3/29", 334, 0, 1.5, 0, 0, 0],
    [8, "2025/3/30", 335, 1, 1.5, 1, 1, 1],
    [8, "2025/3/31", 340, 5, 1.5, 5, 5, 5],
    [8, "2025/4/1", 351, 11, 1.5, 11, 11, 11],
    [9, "2025/3/21", 213, 0, 0.3, 0, 0, 0],
    [9, "2025/3/22", 214, 1, 0.3, 1, 1, 1],
    [9, "2025/3/23", 214, 0, 0.3, 0, 0, 0],
    [9, "2025/3/24", 214, 0, 0.4, 0, 0, 0],
    [9, "2025/3/25", 214, 0, 0.5, 0, 0, 0],
    [9, "2025/3/26", 215, 1, 0.5, 1, 1, 1],
    [9, "2025/3/27", 216, 1, 0.5, 1, 1, 1],
    [9, "2025/3/28", 217, 1, 0.5, 1, 1, 1],
    [9, "2025/3/29", 218, 1, 0.5, 1, 1, 1],
    [9, "2025/3/30", 219, 1, 0.5, 1, 1, 1],
    [9, "2025/3/31", 219, 0, 0.5, 0, 0, 0],
    [9, "2025/4/1", 220, 1, 0.5, 1, 1, 1],
    [10, "2025/3/21", 380, 0, 0.4, 0, 0, 0],
    [10, "2025/3/22", 381, 1, 0.4, 1, 1, 1],
    [10, "2025/3/23", 381, 0, 0.3, 0, 0, 0],
    [10, "2025/3/24", 381, 0, 0.3, 0, 0, 0],
    [10, "2025/3/25", 381, 0, 0.3, 0, 0, 0],
    [10, "2025/3/26", 381, 0, 1, 0, 0, 0],
    [10, "2025/3/27", 381, 0, 1.8, 0, 0, 0],
    [10, "2025/3/28", 381, 0, 2.7, 0, 0, 0],
    [10, "2025/3/29", 389, 8, 3.5, 8, 8, 8],
    [10, "2025/3/30", 399, 10, 3.5, 10, 10, 10],
    [10, "2025/3/31", 410, 11, 3.5, 11, 11, 11],
    [10, "2025/4/1", 421, 11, 3.5, 11, 11, 11]
]

if __name__ == "__main__":
    main() 